// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 15.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace CloudPrototyper.NET.Framework.v462.TblStorage.Templates
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Users\ogasi_000\Documents\Visual Studio 2015\Projects\Prototyper\CloudPrototyper\CloudPrototyper.NET.Framework.v462.TblStorage\Templates\AzureTableStorageContextTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public partial class AzureTableStorageContextTemplate : AzureTableStorageContextTemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("using System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing Micro" +
                    "soft.WindowsAzure.Storage;\r\nusing Microsoft.WindowsAzure.Storage.Table;\r\nusing M" +
                    "icrosoft.WindowsAzure.Storage.Table.Protocol;\r\n//Azure table storage\r\nnamespace " +
                    "");
            
            #line 14 "C:\Users\ogasi_000\Documents\Visual Studio 2015\Projects\Prototyper\CloudPrototyper\CloudPrototyper.NET.Framework.v462.TblStorage\Templates\AzureTableStorageContextTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.Namespace));
            
            #line default
            #line hidden
            this.Write(" \r\n{\r\n    public class ");
            
            #line 16 "C:\Users\ogasi_000\Documents\Visual Studio 2015\Projects\Prototyper\CloudPrototyper\CloudPrototyper.NET.Framework.v462.TblStorage\Templates\AzureTableStorageContextTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name));
            
            #line default
            #line hidden
            this.Write(" : ");
            
            #line 16 "C:\Users\ogasi_000\Documents\Visual Studio 2015\Projects\Prototyper\CloudPrototyper\CloudPrototyper.NET.Framework.v462.TblStorage\Templates\AzureTableStorageContextTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.StorageInterface.Namespace));
            
            #line default
            #line hidden
            this.Write(".");
            
            #line 16 "C:\Users\ogasi_000\Documents\Visual Studio 2015\Projects\Prototyper\CloudPrototyper\CloudPrototyper.NET.Framework.v462.TblStorage\Templates\AzureTableStorageContextTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.StorageInterface.Name));
            
            #line default
            #line hidden
            this.Write("\r\n    {\r\n\t\tprivate readonly Dictionary<string, Tuple<Type,int>> _names = new Dict" +
                    "ionary<string, Tuple<Type,int>>();\r\n\t\tprivate readonly CloudStorageAccount _stor" +
                    "ageAccount = CloudStorageAccount.Parse(\"");
            
            #line 19 "C:\Users\ogasi_000\Documents\Visual Studio 2015\Projects\Prototyper\CloudPrototyper\CloudPrototyper.NET.Framework.v462.TblStorage\Templates\AzureTableStorageContextTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.ModelParameters.ConnectionString));
            
            #line default
            #line hidden
            this.Write("\");\r\n\t\tprivate readonly CloudTableClient _tableClient;\r\n\t\tpublic const string Nam" +
                    "e = \"");
            
            #line 21 "C:\Users\ogasi_000\Documents\Visual Studio 2015\Projects\Prototyper\CloudPrototyper\CloudPrototyper.NET.Framework.v462.TblStorage\Templates\AzureTableStorageContextTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.ModelParameters.Name));
            
            #line default
            #line hidden
            this.Write("\";\r\n\t\tpublic ");
            
            #line 22 "C:\Users\ogasi_000\Documents\Visual Studio 2015\Projects\Prototyper\CloudPrototyper\CloudPrototyper.NET.Framework.v462.TblStorage\Templates\AzureTableStorageContextTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name));
            
            #line default
            #line hidden
            this.Write("() \r\n\t\t{ \r\n\t\t\tInitDictionary();\r\n\t\t\t_tableClient = _storageAccount.CreateCloudTab" +
                    "leClient();\r\n\t\t}\r\n\t\t\r\n        public string GetName()\r\n        {\r\n            re" +
                    "turn \"");
            
            #line 30 "C:\Users\ogasi_000\Documents\Visual Studio 2015\Projects\Prototyper\CloudPrototyper\CloudPrototyper.NET.Framework.v462.TblStorage\Templates\AzureTableStorageContextTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.Key));
            
            #line default
            #line hidden
            this.Write("\";\r\n        }\r\n\t\t\r\n\t\tpublic List<object> GetEntities(string entitySetName, string" +
                    " entityName, ");
            
            #line 33 "C:\Users\ogasi_000\Documents\Visual Studio 2015\Projects\Prototyper\CloudPrototyper\CloudPrototyper.NET.Framework.v462.TblStorage\Templates\AzureTableStorageContextTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.Query.Namespace));
            
            #line default
            #line hidden
            this.Write(".");
            
            #line 33 "C:\Users\ogasi_000\Documents\Visual Studio 2015\Projects\Prototyper\CloudPrototyper\CloudPrototyper.NET.Framework.v462.TblStorage\Templates\AzureTableStorageContextTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.Query.Name));
            
            #line default
            #line hidden
            this.Write(" query)\r\n\t\t{\r\n");
            
            #line 35 "C:\Users\ogasi_000\Documents\Visual Studio 2015\Projects\Prototyper\CloudPrototyper\CloudPrototyper.NET.Framework.v462.TblStorage\Templates\AzureTableStorageContextTemplate.tt"
 foreach(var entitySet in Model.ModelParameters.EntitySets) { 
            
            #line default
            #line hidden
            this.Write("\t\t\tif(entitySetName == \"");
            
            #line 36 "C:\Users\ogasi_000\Documents\Visual Studio 2015\Projects\Prototyper\CloudPrototyper\CloudPrototyper.NET.Framework.v462.TblStorage\Templates\AzureTableStorageContextTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(entitySet.Name));
            
            #line default
            #line hidden
            this.Write("\")\r\n\t\t\t{\r\n\t\t\t\tCloudTable table = _tableClient.GetTableReference(entitySetName);\r\n" +
                    "\t\t\t\tTableQuery<");
            
            #line 39 "C:\Users\ogasi_000\Documents\Visual Studio 2015\Projects\Prototyper\CloudPrototyper\CloudPrototyper.NET.Framework.v462.TblStorage\Templates\AzureTableStorageContextTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.Entities.Single(x=>x.Key == entitySet.EntityName).Namespace));
            
            #line default
            #line hidden
            this.Write(".");
            
            #line 39 "C:\Users\ogasi_000\Documents\Visual Studio 2015\Projects\Prototyper\CloudPrototyper\CloudPrototyper.NET.Framework.v462.TblStorage\Templates\AzureTableStorageContextTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.Entities.Single(x=>x.Key == entitySet.EntityName).Name));
            
            #line default
            #line hidden
            this.Write("> tableQuery = new TableQuery<");
            
            #line 39 "C:\Users\ogasi_000\Documents\Visual Studio 2015\Projects\Prototyper\CloudPrototyper\CloudPrototyper.NET.Framework.v462.TblStorage\Templates\AzureTableStorageContextTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.Entities.Single(x=>x.Key == entitySet.EntityName).Namespace));
            
            #line default
            #line hidden
            this.Write(".");
            
            #line 39 "C:\Users\ogasi_000\Documents\Visual Studio 2015\Projects\Prototyper\CloudPrototyper\CloudPrototyper.NET.Framework.v462.TblStorage\Templates\AzureTableStorageContextTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.Entities.Single(x=>x.Key == entitySet.EntityName).Name));
            
            #line default
            #line hidden
            this.Write(">();\r\n                if (query.IsNominal)\r\n                {\r\n                  " +
                    "  if (query.PropertyName == \"Id\")\r\n                    {\r\n                      " +
                    "  var qId = tableQuery.Where(\r\n                        TableQuery.CombineFilters" +
                    "(\r\n                        TableQuery.GenerateFilterCondition(\"PartitionKey\", Qu" +
                    "eryComparisons.Equal, \"p\"),\r\n                        TableOperators.And,\r\n      " +
                    "                  TableQuery.GenerateFilterCondition(\"RowKey\", QueryComparisons." +
                    "Equal, query.NominalParameter)));\r\n                        return table.ExecuteQ" +
                    "uery(qId).Cast<object>().ToList();\r\n                    }\r\n                    v" +
                    "ar q = tableQuery.Where(TableQuery.GenerateFilterCondition(query.PropertyName, Q" +
                    "ueryComparisons.Equal, query.NominalParameter));\r\n                    return tab" +
                    "le.ExecuteQuery(q).Cast<object>().ToList();\r\n                }\r\n\t\t\t\t if (query.P" +
                    "ropertyName == \"Id\")\r\n                    {\r\n                        var qId = t" +
                    "ableQuery.Where(\r\n                            TableQuery.CombineFilters(\r\n      " +
                    "                          TableQuery.GenerateFilterCondition(\"PartitionKey\", Que" +
                    "ryComparisons.Equal, \"p\"),\r\n                                TableOperators.And,\r" +
                    "\n                                TableQuery.CombineFilters(\r\n                   " +
                    "                 TableQuery.GenerateFilterCondition(\"RowKey\", QueryComparisons.G" +
                    "reaterThanOrEqual, query.MinValue), \r\n                                    TableO" +
                    "perators.And, \r\n                                    TableQuery.GenerateFilterCon" +
                    "dition(\"RowKey\", QueryComparisons.LessThanOrEqual, query.MaxValue\r\n             " +
                    "                    )\r\n                          )));\r\n                        r" +
                    "eturn table.ExecuteQuery(qId).Cast<object>().ToList();\r\n                    }\r\n " +
                    "               var queryRange = tableQuery.Where(\r\n                    TableQuer" +
                    "y.CombineFilters(\r\n                        TableQuery.GenerateFilterCondition(qu" +
                    "ery.PropertyName, QueryComparisons.GreaterThanOrEqual, query.MinValue),\r\n       " +
                    "                 TableOperators.And,\r\n                        TableQuery.Generat" +
                    "eFilterCondition(query.PropertyName, QueryComparisons.LessThanOrEqual, query.Max" +
                    "Value)));\r\n                return table.ExecuteQuery(queryRange).Cast<object>()." +
                    "ToList();\r\n\t\t\t} \r\n");
            
            #line 75 "C:\Users\ogasi_000\Documents\Visual Studio 2015\Projects\Prototyper\CloudPrototyper\CloudPrototyper.NET.Framework.v462.TblStorage\Templates\AzureTableStorageContextTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write(@"			
			return new List<object>();
		}


		public void InsertAll(string entitySetName, string entityName, object[] toInsert)
		{
		    CloudTable table = _tableClient.GetTableReference(entitySetName);
		    table.CreateIfNotExists();
		    TableBatchOperation batchOperation = new TableBatchOperation();
			int count = 0;
		    foreach (var obj in toInsert)
		    {
		        count++;
		        if (count >= TableConstants.TableServiceBatchMaximumOperations-1)
		        {
		            table.ExecuteBatch(batchOperation);
		            batchOperation = new TableBatchOperation();
		            count = 0;
		        }
		        batchOperation.InsertOrReplace(obj as TableEntity);
            }
		    table.ExecuteBatch(batchOperation);
		}

		public void Insert(string entitySetName,string entityName, int count)
		{
			object[] generated = null;
");
            
            #line 104 "C:\Users\ogasi_000\Documents\Visual Studio 2015\Projects\Prototyper\CloudPrototyper\CloudPrototyper.NET.Framework.v462.TblStorage\Templates\AzureTableStorageContextTemplate.tt"
 foreach(var entity in Model.Entities) { 
            
            #line default
            #line hidden
            this.Write("\t\t\tif(entityName == \"");
            
            #line 105 "C:\Users\ogasi_000\Documents\Visual Studio 2015\Projects\Prototyper\CloudPrototyper\CloudPrototyper.NET.Framework.v462.TblStorage\Templates\AzureTableStorageContextTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(entity.Name));
            
            #line default
            #line hidden
            this.Write("\")\r\n\t\t\t{\r\n\t\t\t\tgenerated = ");
            
            #line 107 "C:\Users\ogasi_000\Documents\Visual Studio 2015\Projects\Prototyper\CloudPrototyper\CloudPrototyper.NET.Framework.v462.TblStorage\Templates\AzureTableStorageContextTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.DataGenerator.Namespace));
            
            #line default
            #line hidden
            this.Write(".");
            
            #line 107 "C:\Users\ogasi_000\Documents\Visual Studio 2015\Projects\Prototyper\CloudPrototyper\CloudPrototyper.NET.Framework.v462.TblStorage\Templates\AzureTableStorageContextTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.DataGenerator.Name));
            
            #line default
            #line hidden
            this.Write(".GetInstance().Generate<");
            
            #line 107 "C:\Users\ogasi_000\Documents\Visual Studio 2015\Projects\Prototyper\CloudPrototyper\CloudPrototyper.NET.Framework.v462.TblStorage\Templates\AzureTableStorageContextTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(entity.Namespace));
            
            #line default
            #line hidden
            this.Write(".");
            
            #line 107 "C:\Users\ogasi_000\Documents\Visual Studio 2015\Projects\Prototyper\CloudPrototyper\CloudPrototyper.NET.Framework.v462.TblStorage\Templates\AzureTableStorageContextTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(entity.Name));
            
            #line default
            #line hidden
            this.Write(">(count).ToArray();\r\n\r\n\t\t\t} \r\n");
            
            #line 110 "C:\Users\ogasi_000\Documents\Visual Studio 2015\Projects\Prototyper\CloudPrototyper\CloudPrototyper.NET.Framework.v462.TblStorage\Templates\AzureTableStorageContextTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\t\t\tInsertAll(entitySetName,entityName,generated);\r\n\r\n\t\t}\r\n\r\n\t\tprivate void InitDi" +
                    "ctionary()\r\n        {\r\n");
            
            #line 117 "C:\Users\ogasi_000\Documents\Visual Studio 2015\Projects\Prototyper\CloudPrototyper\CloudPrototyper.NET.Framework.v462.TblStorage\Templates\AzureTableStorageContextTemplate.tt"
 foreach(var set in Model.ModelParameters.EntitySets) { 
            
            #line default
            #line hidden
            this.Write("\t\t\t_names.Add(\"");
            
            #line 118 "C:\Users\ogasi_000\Documents\Visual Studio 2015\Projects\Prototyper\CloudPrototyper\CloudPrototyper.NET.Framework.v462.TblStorage\Templates\AzureTableStorageContextTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(set.Name));
            
            #line default
            #line hidden
            this.Write("\", new Tuple<Type,int>(typeof(");
            
            #line 118 "C:\Users\ogasi_000\Documents\Visual Studio 2015\Projects\Prototyper\CloudPrototyper\CloudPrototyper.NET.Framework.v462.TblStorage\Templates\AzureTableStorageContextTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.Entities.Single(x=>x.Name == set.EntityName).Namespace));
            
            #line default
            #line hidden
            this.Write(".");
            
            #line 118 "C:\Users\ogasi_000\Documents\Visual Studio 2015\Projects\Prototyper\CloudPrototyper\CloudPrototyper.NET.Framework.v462.TblStorage\Templates\AzureTableStorageContextTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.Entities.Single(x=>x.Name == set.EntityName).Name));
            
            #line default
            #line hidden
            this.Write("),");
            
            #line 118 "C:\Users\ogasi_000\Documents\Visual Studio 2015\Projects\Prototyper\CloudPrototyper\CloudPrototyper.NET.Framework.v462.TblStorage\Templates\AzureTableStorageContextTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(set.Count));
            
            #line default
            #line hidden
            this.Write("));\r\n");
            
            #line 119 "C:\Users\ogasi_000\Documents\Visual Studio 2015\Projects\Prototyper\CloudPrototyper\CloudPrototyper.NET.Framework.v462.TblStorage\Templates\AzureTableStorageContextTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("        }\r\n\r\n    }\r\n}");
            return this.GenerationEnvironment.ToString();
        }
        
        #line 1 "C:\Users\ogasi_000\Documents\Visual Studio 2015\Projects\Prototyper\CloudPrototyper\CloudPrototyper.NET.Framework.v462.TblStorage\Templates\AzureTableStorageContextTemplate.tt"

private global::CloudPrototyper.NET.Framework.v462.TblStorage.Generators.AzureTableStorageContextGenerator _ModelField;

/// <summary>
/// Access the Model parameter of the template.
/// </summary>
private global::CloudPrototyper.NET.Framework.v462.TblStorage.Generators.AzureTableStorageContextGenerator Model
{
    get
    {
        return this._ModelField;
    }
}


/// <summary>
/// Initialize the template
/// </summary>
public virtual void Initialize()
{
    if ((this.Errors.HasErrors == false))
    {
bool ModelValueAcquired = false;
if (this.Session.ContainsKey("Model"))
{
    this._ModelField = ((global::CloudPrototyper.NET.Framework.v462.TblStorage.Generators.AzureTableStorageContextGenerator)(this.Session["Model"]));
    ModelValueAcquired = true;
}
if ((ModelValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("Model");
    if ((data != null))
    {
        this._ModelField = ((global::CloudPrototyper.NET.Framework.v462.TblStorage.Generators.AzureTableStorageContextGenerator)(data));
    }
}


    }
}


        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public class AzureTableStorageContextTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
