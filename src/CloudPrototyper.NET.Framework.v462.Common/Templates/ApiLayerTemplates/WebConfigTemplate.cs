// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 15.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace CloudPrototyper.NET.Framework.v462.Common.Templates.ApiLayerTemplates
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Users\ogasi_000\Documents\Visual Studio 2015\Projects\Prototyper\CloudPrototyper\CloudPrototyper.NET.Framework.v462.Common\Templates\ApiLayerTemplates\WebConfigTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public partial class WebConfigTemplate : WebConfigTemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<!--\r\n  For more information on how to co" +
                    "nfigure your ASP.NET application, please visit\r\n  http://go.microsoft.com/fwlink" +
                    "/?LinkId=301879\r\n  -->\r\n<configuration>\r\n  <configSections>\r\n    <!-- For more i" +
                    "nformation on Entity Framework configuration, visit http://go.microsoft.com/fwli" +
                    "nk/?LinkID=237468 -->\r\n    <section name=\"entityFramework\" type=\"System.Data.Ent" +
                    "ity.Internal.ConfigFile.EntityFrameworkSection, EntityFramework, Version=6.0.0.0" +
                    ", Culture=neutral, PublicKeyToken=b77a5c561934e089\" requirePermission=\"false\"/>\r" +
                    "\n  </configSections>\r\n  <appSettings></appSettings>\r\n  <system.web>\r\n    <compil" +
                    "ation debug=\"true\" targetFramework=\"4.6.2\"/>\r\n    <httpRuntime targetFramework=\"" +
                    "4.6.2\"/>\r\n  </system.web>\r\n  <system.webServer>\r\n    <handlers>\r\n      <remove n" +
                    "ame=\"ExtensionlessUrlHandler-Integrated-4.0\"/>\r\n      <remove name=\"OPTIONSVerbH" +
                    "andler\"/>\r\n      <remove name=\"TRACEVerbHandler\"/>\r\n      <add name=\"Extensionle" +
                    "ssUrlHandler-Integrated-4.0\" path=\"*.\" verb=\"*\" type=\"System.Web.Handlers.Transf" +
                    "erRequestHandler\"\r\n        preCondition=\"integratedMode,runtimeVersionv4.0\"/>\r\n " +
                    "   </handlers>\r\n  </system.webServer>\r\n  <runtime>\r\n    <assemblyBinding xmlns=\"" +
                    "urn:schemas-microsoft-com:asm.v1\">\r\n      <dependentAssembly>\r\n        <assembly" +
                    "Identity name=\"System.Web.Helpers\" publicKeyToken=\"31bf3856ad364e35\"/>\r\n        " +
                    "<bindingRedirect oldVersion=\"1.0.0.0-3.0.0.0\" newVersion=\"3.0.0.0\"/>\r\n      </de" +
                    "pendentAssembly>\r\n      <dependentAssembly>\r\n        <assemblyIdentity name=\"Sys" +
                    "tem.Web.Mvc\" publicKeyToken=\"31bf3856ad364e35\"/>\r\n        <bindingRedirect oldVe" +
                    "rsion=\"1.0.0.0-5.2.3.0\" newVersion=\"5.2.3.0\"/>\r\n      </dependentAssembly>\r\n    " +
                    "  <dependentAssembly>\r\n        <assemblyIdentity name=\"System.Web.WebPages\" publ" +
                    "icKeyToken=\"31bf3856ad364e35\"/>\r\n        <bindingRedirect oldVersion=\"1.0.0.0-3." +
                    "0.0.0\" newVersion=\"3.0.0.0\"/>\r\n      </dependentAssembly>\r\n\t        <assemblyBin" +
                    "ding xmlns=\"urn:schemas-microsoft-com:asm.v1\">\r\n        <dependentAssembly>\r\n   " +
                    "       <assemblyIdentity name=\"Newtonsoft.Json\" publicKeyToken=\"30AD4FE6B2A6AEED" +
                    "\" culture=\"neutral\"/>\r\n          <bindingRedirect oldVersion=\"0.0.0.0-6.0.0.0\" n" +
                    "ewVersion=\"6.0.0.0\"/>\r\n        </dependentAssembly>\r\n      </assemblyBinding>\r\n " +
                    "   </assemblyBinding>\r\n  </runtime>\r\n  <system.codedom>\r\n    <compilers>\r\n      " +
                    "<compiler language=\"c#;cs;csharp\" extension=\".cs\"\r\n        type=\"Microsoft.CodeD" +
                    "om.Providers.DotNetCompilerPlatform.CSharpCodeProvider, Microsoft.CodeDom.Provid" +
                    "ers.DotNetCompilerPlatform, Version=1.0.0.0, Culture=neutral, PublicKeyToken=31b" +
                    "f3856ad364e35\"\r\n        warningLevel=\"4\" compilerOptions=\"/langversion:6 /nowarn" +
                    ":1659;1699;1701\"/>\r\n      <compiler language=\"vb;vbs;visualbasic;vbscript\" exten" +
                    "sion=\".vb\"\r\n        type=\"Microsoft.CodeDom.Providers.DotNetCompilerPlatform.VBC" +
                    "odeProvider, Microsoft.CodeDom.Providers.DotNetCompilerPlatform, Version=1.0.0.0" +
                    ", Culture=neutral, PublicKeyToken=31bf3856ad364e35\"\r\n        warningLevel=\"4\" co" +
                    "mpilerOptions=\"/langversion:14 /nowarn:41008 /define:_MYTYPE=\\&quot;Web\\&quot; /" +
                    "optionInfer+\"/>\r\n    </compilers>\r\n  </system.codedom>\r\n   <entityFramework>\r\n  " +
                    "  <defaultConnectionFactory type=\"System.Data.Entity.Infrastructure.LocalDbConne" +
                    "ctionFactory, EntityFramework\">\r\n      <parameters>\r\n        <parameter value=\"m" +
                    "ssqllocaldb\"/>\r\n      </parameters>\r\n    </defaultConnectionFactory>\r\n    <provi" +
                    "ders>\r\n      <provider invariantName=\"System.Data.SqlClient\" type=\"System.Data.E" +
                    "ntity.SqlServer.SqlProviderServices, EntityFramework.SqlServer\"/>\r\n    </provide" +
                    "rs>\r\n  </entityFramework>\r\n</configuration>\r\n");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public class WebConfigTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
