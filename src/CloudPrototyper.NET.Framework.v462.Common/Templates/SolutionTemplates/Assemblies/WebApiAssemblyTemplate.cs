// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 15.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace CloudPrototyper.NET.Framework.v462.Common.Templates.SolutionTemplates.Assemblies
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System.IO;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Users\ogasi_000\Documents\Visual Studio 2015\Projects\Prototyper\CloudPrototyper\CloudPrototyper.NET.Framework.v462.Common\Templates\SolutionTemplates\Assemblies\WebApiAssemblyTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public partial class WebApiAssemblyTemplate : WebApiAssemblyTemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write(@"<?xml version=""1.0"" encoding=""utf-8""?>
<Project ToolsVersion=""12.0"" DefaultTargets=""Build"" xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">

  <Import Project=""..\packages\MSBuild.Microsoft.VisualStudio.Web.targets.14.0.0.3\build\MSBuild.Microsoft.VisualStudio.Web.targets.props"" Condition=""Exists('..\packages\MSBuild.Microsoft.VisualStudio.Web.targets.14.0.0.3\build\MSBuild.Microsoft.VisualStudio.Web.targets.props')"" />
  <Import Project=""..\packages\Microsoft.CodeDom.Providers.DotNetCompilerPlatform.1.0.0\build\Microsoft.CodeDom.Providers.DotNetCompilerPlatform.props"" Condition=""Exists('..\packages\Microsoft.CodeDom.Providers.DotNetCompilerPlatform.1.0.0\build\Microsoft.CodeDom.Providers.DotNetCompilerPlatform.props')"" />
  <Import Project=""..\packages\Microsoft.Net.Compilers.1.0.0\build\Microsoft.Net.Compilers.props"" Condition=""Exists('..\packages\Microsoft.Net.Compilers.1.0.0\build\Microsoft.Net.Compilers.props')"" />
  <Import Project=""$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props"" Condition=""Exists('$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props')"" />
  <PropertyGroup>
    <Configuration Condition="" '$(Configuration)' == '' "">Debug</Configuration>
    <Platform Condition="" '$(Platform)' == '' "">AnyCPU</Platform>
    <ProductVersion>
    </ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{");
            
            #line 21 "C:\Users\ogasi_000\Documents\Visual Studio 2015\Projects\Prototyper\CloudPrototyper\CloudPrototyper.NET.Framework.v462.Common\Templates\SolutionTemplates\Assemblies\WebApiAssemblyTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.AssemblyInfo.UniqueProjectId.ToString().ToUpper()));
            
            #line default
            #line hidden
            this.Write("}</ProjectGuid>\r\n    <ProjectTypeGuids>{349c5851-65df-11da-9384-00065b846f21};{fa" +
                    "e04ec0-301f-11d3-bf4b-00c04f79efbc}</ProjectTypeGuids>\r\n    <OutputType>Library<" +
                    "/OutputType>\r\n    <AppDesignerFolder>Properties</AppDesignerFolder>\r\n    <RootNa" +
                    "mespace>");
            
            #line 25 "C:\Users\ogasi_000\Documents\Visual Studio 2015\Projects\Prototyper\CloudPrototyper\CloudPrototyper.NET.Framework.v462.Common\Templates\SolutionTemplates\Assemblies\WebApiAssemblyTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.AssemblyInfo.Name));
            
            #line default
            #line hidden
            this.Write("</RootNamespace>\r\n    <AssemblyName>");
            
            #line 26 "C:\Users\ogasi_000\Documents\Visual Studio 2015\Projects\Prototyper\CloudPrototyper\CloudPrototyper.NET.Framework.v462.Common\Templates\SolutionTemplates\Assemblies\WebApiAssemblyTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.AssemblyInfo.Name));
            
            #line default
            #line hidden
            this.Write("</AssemblyName>\r\n    <TargetFrameworkVersion>v4.6.2</TargetFrameworkVersion>\r\n   " +
                    " <UseIISExpress>true</UseIISExpress>\r\n    <IISExpressSSLPort />\r\n    <IISExpress" +
                    "AnonymousAuthentication />\r\n    <IISExpressWindowsAuthentication />\r\n    <IISExp" +
                    "ressUseClassicPipelineMode />\r\n    <UseGlobalApplicationHostFile />\r\n    <NuGetP" +
                    "ackageImportStamp>\r\n    </NuGetPackageImportStamp>\r\n  </PropertyGroup>\r\n  <Prope" +
                    "rtyGroup Condition=\" \'$(Configuration)|$(Platform)\' == \'Debug|AnyCPU\' \">\r\n    <D" +
                    "ebugSymbols>true</DebugSymbols>\r\n    <DebugType>full</DebugType>\r\n    <Optimize>" +
                    "false</Optimize>\r\n    <OutputPath>bin\\</OutputPath>\r\n    <DefineConstants>DEBUG;" +
                    "TRACE</DefineConstants>\r\n    <ErrorReport>prompt</ErrorReport>\r\n    <WarningLeve" +
                    "l>4</WarningLevel>\r\n  </PropertyGroup>\r\n  <PropertyGroup Condition=\" \'$(Configur" +
                    "ation)|$(Platform)\' == \'Release|AnyCPU\' \">\r\n    <DebugType>pdbonly</DebugType>\r\n" +
                    "    <Optimize>true</Optimize>\r\n    <OutputPath>bin\\</OutputPath>\r\n    <DefineCon" +
                    "stants>TRACE</DefineConstants>\r\n    <ErrorReport>prompt</ErrorReport>\r\n    <Warn" +
                    "ingLevel>4</WarningLevel>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <Reference Inc" +
                    "lude=\"Microsoft.CodeDom.Providers.DotNetCompilerPlatform, Version=1.0.0.0, Cultu" +
                    "re=neutral, PublicKeyToken=31bf3856ad364e35, processorArchitecture=MSIL\">\r\n     " +
                    " <HintPath>..\\packages\\Microsoft.CodeDom.Providers.DotNetCompilerPlatform.1.0.0\\" +
                    "lib\\net45\\Microsoft.CodeDom.Providers.DotNetCompilerPlatform.dll</HintPath>\r\n   " +
                    "   <Private>True</Private>\r\n    </Reference>\r\n    <Reference Include=\"Microsoft." +
                    "CSharp\" />\r\n    <Reference Include=\"System.Net.Http\" />\r\n    <Reference Include=" +
                    "\"System.Web.DynamicData\" />\r\n    <Reference Include=\"System.Web.Entity\" />\r\n    " +
                    "<Reference Include=\"System.Web.ApplicationServices\" />\r\n\t<Reference Include=\"Sys" +
                    "tem.Runtime.Serialization\" />\r\n    <Reference Include=\"System.ComponentModel.Dat" +
                    "aAnnotations\" />\r\n    <Reference Include=\"System\" />\r\n    <Reference Include=\"Sy" +
                    "stem.Data\" />\r\n    <Reference Include=\"System.Core\" />\r\n    <Reference Include=\"" +
                    "System.Data.DataSetExtensions\" />\r\n    <Reference Include=\"System.Web.Extensions" +
                    "\" />\r\n    <Reference Include=\"System.Xml.Linq\" />\r\n    <Reference Include=\"Syste" +
                    "m.Drawing\" />\r\n    <Reference Include=\"System.Web\" />\r\n    <Reference Include=\"S" +
                    "ystem.Xml\" />\r\n    <Reference Include=\"System.Configuration\" />\r\n    <Reference " +
                    "Include=\"System.Web.Services\" />\r\n    <Reference Include=\"System.EnterpriseServi" +
                    "ces\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <Reference Include=\"Newtonsoft.Json\"" +
                    ">\r\n      <HintPath>..\\packages\\Newtonsoft.Json.6.0.4\\lib\\net45\\Newtonsoft.Json.d" +
                    "ll</HintPath>\r\n    </Reference>\r\n    <Reference Include=\"System.Net.Http.Formatt" +
                    "ing\">\r\n      <HintPath>..\\packages\\Microsoft.AspNet.WebApi.Client.5.2.3\\lib\\net4" +
                    "5\\System.Net.Http.Formatting.dll</HintPath>\r\n    </Reference>\r\n    <Reference In" +
                    "clude=\"System.Web.Http\">\r\n      <HintPath>..\\packages\\Microsoft.AspNet.WebApi.Co" +
                    "re.5.2.3\\lib\\net45\\System.Web.Http.dll</HintPath>\r\n    </Reference>\r\n    <Refere" +
                    "nce Include=\"System.Web.Http.WebHost\">\r\n      <HintPath>..\\packages\\Microsoft.As" +
                    "pNet.WebApi.WebHost.5.2.3\\lib\\net45\\System.Web.Http.WebHost.dll</HintPath>\r\n    " +
                    "</Reference>\r\n");
            
            #line 92 "C:\Users\ogasi_000\Documents\Visual Studio 2015\Projects\Prototyper\CloudPrototyper\CloudPrototyper.NET.Framework.v462.Common\Templates\SolutionTemplates\Assemblies\WebApiAssemblyTemplate.tt"
 foreach(var reference in Model.AssemblyInfo.Packages) {
            
            #line default
            #line hidden
            
            #line 93 "C:\Users\ogasi_000\Documents\Visual Studio 2015\Projects\Prototyper\CloudPrototyper\CloudPrototyper.NET.Framework.v462.Common\Templates\SolutionTemplates\Assemblies\WebApiAssemblyTemplate.tt"
 foreach(var package in reference.IncludeHintPathTuples) {
            
            #line default
            #line hidden
            this.Write("\t<Reference Include=\"");
            
            #line 94 "C:\Users\ogasi_000\Documents\Visual Studio 2015\Projects\Prototyper\CloudPrototyper\CloudPrototyper.NET.Framework.v462.Common\Templates\SolutionTemplates\Assemblies\WebApiAssemblyTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(package.Item1));
            
            #line default
            #line hidden
            this.Write("\">\r\n");
            
            #line 95 "C:\Users\ogasi_000\Documents\Visual Studio 2015\Projects\Prototyper\CloudPrototyper\CloudPrototyper.NET.Framework.v462.Common\Templates\SolutionTemplates\Assemblies\WebApiAssemblyTemplate.tt"
 if(!string.IsNullOrEmpty(package.Item2)) { 
            
            #line default
            #line hidden
            this.Write("\t\t\t <HintPath>");
            
            #line 96 "C:\Users\ogasi_000\Documents\Visual Studio 2015\Projects\Prototyper\CloudPrototyper\CloudPrototyper.NET.Framework.v462.Common\Templates\SolutionTemplates\Assemblies\WebApiAssemblyTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(package.Item2));
            
            #line default
            #line hidden
            this.Write("</HintPath>\r\n");
            
            #line 97 "C:\Users\ogasi_000\Documents\Visual Studio 2015\Projects\Prototyper\CloudPrototyper\CloudPrototyper.NET.Framework.v462.Common\Templates\SolutionTemplates\Assemblies\WebApiAssemblyTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("    </Reference>\r\n");
            
            #line 99 "C:\Users\ogasi_000\Documents\Visual Studio 2015\Projects\Prototyper\CloudPrototyper\CloudPrototyper.NET.Framework.v462.Common\Templates\SolutionTemplates\Assemblies\WebApiAssemblyTemplate.tt"
 } 
            
            #line default
            #line hidden
            
            #line 100 "C:\Users\ogasi_000\Documents\Visual Studio 2015\Projects\Prototyper\CloudPrototyper\CloudPrototyper.NET.Framework.v462.Common\Templates\SolutionTemplates\Assemblies\WebApiAssemblyTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("  </ItemGroup>\r\n<ItemGroup>\r\n");
            
            #line 103 "C:\Users\ogasi_000\Documents\Visual Studio 2015\Projects\Prototyper\CloudPrototyper\CloudPrototyper.NET.Framework.v462.Common\Templates\SolutionTemplates\Assemblies\WebApiAssemblyTemplate.tt"
 foreach(var import in Model.AssemblyInfo.AssemblyImports) {
            
            #line default
            #line hidden
            this.Write("\t<ProjectReference Include=\"..\\");
            
            #line 104 "C:\Users\ogasi_000\Documents\Visual Studio 2015\Projects\Prototyper\CloudPrototyper\CloudPrototyper.NET.Framework.v462.Common\Templates\SolutionTemplates\Assemblies\WebApiAssemblyTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Path.Combine(import.AssemblyInfo.ProjectFileRelativePath, import.AssemblyInfo.Name)));
            
            #line default
            #line hidden
            this.Write(".csproj\">\r\n      <Project>{");
            
            #line 105 "C:\Users\ogasi_000\Documents\Visual Studio 2015\Projects\Prototyper\CloudPrototyper\CloudPrototyper.NET.Framework.v462.Common\Templates\SolutionTemplates\Assemblies\WebApiAssemblyTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(import.AssemblyInfo.UniqueProjectId.ToString().ToUpper()));
            
            #line default
            #line hidden
            this.Write("}</Project>\r\n      <Name>");
            
            #line 106 "C:\Users\ogasi_000\Documents\Visual Studio 2015\Projects\Prototyper\CloudPrototyper\CloudPrototyper.NET.Framework.v462.Common\Templates\SolutionTemplates\Assemblies\WebApiAssemblyTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(import.AssemblyInfo.Name));
            
            #line default
            #line hidden
            this.Write("</Name>\r\n    </ProjectReference>\r\n");
            
            #line 108 "C:\Users\ogasi_000\Documents\Visual Studio 2015\Projects\Prototyper\CloudPrototyper\CloudPrototyper.NET.Framework.v462.Common\Templates\SolutionTemplates\Assemblies\WebApiAssemblyTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("  </ItemGroup>\r\n  <ItemGroup>\r\n");
            
            #line 111 "C:\Users\ogasi_000\Documents\Visual Studio 2015\Projects\Prototyper\CloudPrototyper\CloudPrototyper.NET.Framework.v462.Common\Templates\SolutionTemplates\Assemblies\WebApiAssemblyTemplate.tt"
 foreach(var include in Model.AssemblyInfo.IncludeOnlys)  {
            
            #line default
            #line hidden
            this.Write("    <Content Include=\"");
            
            #line 112 "C:\Users\ogasi_000\Documents\Visual Studio 2015\Projects\Prototyper\CloudPrototyper\CloudPrototyper.NET.Framework.v462.Common\Templates\SolutionTemplates\Assemblies\WebApiAssemblyTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(include));
            
            #line default
            #line hidden
            this.Write("\" />\r\n");
            
            #line 113 "C:\Users\ogasi_000\Documents\Visual Studio 2015\Projects\Prototyper\CloudPrototyper\CloudPrototyper.NET.Framework.v462.Common\Templates\SolutionTemplates\Assemblies\WebApiAssemblyTemplate.tt"
 } 
            
            #line default
            #line hidden
            
            #line 114 "C:\Users\ogasi_000\Documents\Visual Studio 2015\Projects\Prototyper\CloudPrototyper\CloudPrototyper.NET.Framework.v462.Common\Templates\SolutionTemplates\Assemblies\WebApiAssemblyTemplate.tt"
 foreach(var content in Model.AssemblyInfo.Contents) { 
            
            #line default
            #line hidden
            this.Write("    <Content Include=\"..\\");
            
            #line 115 "C:\Users\ogasi_000\Documents\Visual Studio 2015\Projects\Prototyper\CloudPrototyper\CloudPrototyper.NET.Framework.v462.Common\Templates\SolutionTemplates\Assemblies\WebApiAssemblyTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(content.OutputPath));
            
            #line default
            #line hidden
            this.Write("\">\r\n      <CopyToOutputDirectory>Always</CopyToOutputDirectory>\r\n    </Content>\r\n" +
                    "");
            
            #line 118 "C:\Users\ogasi_000\Documents\Visual Studio 2015\Projects\Prototyper\CloudPrototyper\CloudPrototyper.NET.Framework.v462.Common\Templates\SolutionTemplates\Assemblies\WebApiAssemblyTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write(@"</ItemGroup>
  <ItemGroup>
    <Content Include=""Global.asax"">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
	</Content>
    <Content Include=""Web.config"" >
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
	</Content>
  </ItemGroup>
  <ItemGroup>
    <Compile Include=""App_Start\WebApiConfig.cs"" />
    <Compile Include=""Global.asax.cs"">
      <DependentUpon>Global.asax</DependentUpon>
    </Compile>
");
            
            #line 133 "C:\Users\ogasi_000\Documents\Visual Studio 2015\Projects\Prototyper\CloudPrototyper\CloudPrototyper.NET.Framework.v462.Common\Templates\SolutionTemplates\Assemblies\WebApiAssemblyTemplate.tt"
 foreach(var file in Model.AssemblyInfo.FilesToCompile) { if(!(file.GenerationInfo.FileName.EndsWith(@"WebApiConfig.cs") || file.GenerationInfo.FileName.EndsWith(".config")|| file.GenerationInfo.FileName.Contains(".asax"))) {
            
            #line default
            #line hidden
            this.Write("\t\t<compile Include=\"");
            
            #line 134 "C:\Users\ogasi_000\Documents\Visual Studio 2015\Projects\Prototyper\CloudPrototyper\CloudPrototyper.NET.Framework.v462.Common\Templates\SolutionTemplates\Assemblies\WebApiAssemblyTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Path.Combine(file.GenerationInfo.RelativePathFolder.Substring(Model.AssemblyInfo.ProjectFileRelativePath.Length,file.GenerationInfo.RelativePathFolder.Length-Model.AssemblyInfo.ProjectFileRelativePath.Length).TrimStart('\\'), file.GenerationInfo.FileName)));
            
            #line default
            #line hidden
            this.Write("\"/>\r\n");
            
            #line 135 "C:\Users\ogasi_000\Documents\Visual Studio 2015\Projects\Prototyper\CloudPrototyper\CloudPrototyper.NET.Framework.v462.Common\Templates\SolutionTemplates\Assemblies\WebApiAssemblyTemplate.tt"
 }} 
            
            #line default
            #line hidden
            this.Write("  </ItemGroup>\r\n  <ItemGroup>\r\n    <Content Include=\"packages.config\" >\r\n\t <CopyT" +
                    "oOutputDirectory>Always</CopyToOutputDirectory>\r\n    </Content>\r\n    <None Inclu" +
                    "de=\"Web.Debug.config\">\r\n      <DependentUpon>Web.config</DependentUpon>\r\n    </N" +
                    "one>\r\n    <None Include=\"Web.Release.config\">\r\n      <DependentUpon>Web.config</" +
                    "DependentUpon>\r\n    </None>\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <Folder Include=" +
                    "\"App_Data\\\" />\r\n  </ItemGroup>\r\n  <PropertyGroup>\r\n    <VisualStudioVersion Cond" +
                    "ition=\"\'$(VisualStudioVersion)\' == \'\'\">10.0</VisualStudioVersion>\r\n    <VSToolsP" +
                    "ath Condition=\"\'$(VSToolsPath)\' == \'\'\">$(MSBuildExtensionsPath32)\\Microsoft\\Visu" +
                    "alStudio\\v$(VisualStudioVersion)</VSToolsPath>\r\n  </PropertyGroup>\r\n  <Import Pr" +
                    "oject=\"$(MSBuildBinPath)\\Microsoft.CSharp.targets\" />\r\n  <Import Project=\"$(VSTo" +
                    "olsPath)\\WebApplications\\Microsoft.WebApplication.targets\" Condition=\"\'$(VSTools" +
                    "Path)\' != \'\'\" />\r\n  <Import Project=\"..\\packages\\MSBuild.Microsoft.VisualStudio." +
                    "Web.targets.14.0.0.3\\tools\\VSToolsPath\\WebApplications\\Microsoft.WebApplication." +
                    "targets\" Condition=\"true\" />\r\n  <ProjectExtensions>\r\n    <VisualStudio>\r\n      <" +
                    "FlavorProperties GUID=\"{349c5851-65df-11da-9384-00065b846f21}\">\r\n        <WebPro" +
                    "jectProperties>\r\n          <UseIIS>True</UseIIS>\r\n          <AutoAssignPort>True" +
                    "</AutoAssignPort>\r\n          <DevelopmentServerPort>62524</DevelopmentServerPort" +
                    ">\r\n          <DevelopmentServerVPath>/</DevelopmentServerVPath>\r\n          <IISU" +
                    "rl>http://localhost:62524/</IISUrl>\r\n          <NTLMAuthentication>False</NTLMAu" +
                    "thentication>\r\n          <UseCustomServer>False</UseCustomServer>\r\n          <Cu" +
                    "stomServerUrl>\r\n          </CustomServerUrl>\r\n          <SaveServerSettingsInUse" +
                    "rFile>False</SaveServerSettingsInUserFile>\r\n        </WebProjectProperties>\r\n   " +
                    "   </FlavorProperties>\r\n    </VisualStudio>\r\n  </ProjectExtensions>\r\n  <Target N" +
                    "ame=\"EnsureNuGetPackageBuildImports\" BeforeTargets=\"PrepareForBuild\">\r\n    <Prop" +
                    "ertyGroup>\r\n      <ErrorText>This project references NuGet package(s) that are m" +
                    "issing on this computer. Use NuGet Package Restore to download them.  For more i" +
                    "nformation, see http://go.microsoft.com/fwlink/?LinkID=322105. The missing file " +
                    "is {0}.</ErrorText>\r\n    </PropertyGroup>\r\n    <Error Condition=\"!Exists(\'..\\pac" +
                    "kages\\Microsoft.Net.Compilers.1.0.0\\build\\Microsoft.Net.Compilers.props\')\" Text=" +
                    "\"$([System.String]::Format(\'$(ErrorText)\', \'..\\packages\\Microsoft.Net.Compilers." +
                    "1.0.0\\build\\Microsoft.Net.Compilers.props\'))\" />\r\n    <Error Condition=\"!Exists(" +
                    "\'..\\packages\\Microsoft.CodeDom.Providers.DotNetCompilerPlatform.1.0.0\\build\\Micr" +
                    "osoft.CodeDom.Providers.DotNetCompilerPlatform.props\')\" Text=\"$([System.String]:" +
                    ":Format(\'$(ErrorText)\', \'..\\packages\\Microsoft.CodeDom.Providers.DotNetCompilerP" +
                    "latform.1.0.0\\build\\Microsoft.CodeDom.Providers.DotNetCompilerPlatform.props\'))\"" +
                    " />\r\n    <Error Condition=\"!Exists(\'..\\packages\\MSBuild.Microsoft.VisualStudio.W" +
                    "eb.targets.14.0.0.3\\build\\MSBuild.Microsoft.VisualStudio.Web.targets.props\')\" Te" +
                    "xt=\"$([System.String]::Format(\'$(ErrorText)\', \'..\\packages\\MSBuild.Microsoft.Vis" +
                    "ualStudio.Web.targets.14.0.0.3\\build\\MSBuild.Microsoft.VisualStudio.Web.targets." +
                    "props\'))\" />\r\n  </Target>\r\n  <!-- To modify your build process, add your task in" +
                    "side one of the targets below and uncomment it. \r\n       Other similar extension" +
                    " points exist, see Microsoft.Common.targets.\r\n  <Target Name=\"BeforeBuild\">\r\n  <" +
                    "/Target>\r\n  <Target Name=\"AfterBuild\">\r\n  </Target>\r\n  -->\r\n</Project>");
            return this.GenerationEnvironment.ToString();
        }
        
        #line 1 "C:\Users\ogasi_000\Documents\Visual Studio 2015\Projects\Prototyper\CloudPrototyper\CloudPrototyper.NET.Framework.v462.Common\Templates\SolutionTemplates\Assemblies\WebApiAssemblyTemplate.tt"

private global::CloudPrototyper.NET.Framework.v462.Common.Generators.SolutionGenerators.AssemblyFiles.WebApiAssemblyFileGenerator _ModelField;

/// <summary>
/// Access the Model parameter of the template.
/// </summary>
private global::CloudPrototyper.NET.Framework.v462.Common.Generators.SolutionGenerators.AssemblyFiles.WebApiAssemblyFileGenerator Model
{
    get
    {
        return this._ModelField;
    }
}


/// <summary>
/// Initialize the template
/// </summary>
public virtual void Initialize()
{
    if ((this.Errors.HasErrors == false))
    {
bool ModelValueAcquired = false;
if (this.Session.ContainsKey("Model"))
{
    this._ModelField = ((global::CloudPrototyper.NET.Framework.v462.Common.Generators.SolutionGenerators.AssemblyFiles.WebApiAssemblyFileGenerator)(this.Session["Model"]));
    ModelValueAcquired = true;
}
if ((ModelValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("Model");
    if ((data != null))
    {
        this._ModelField = ((global::CloudPrototyper.NET.Framework.v462.Common.Generators.SolutionGenerators.AssemblyFiles.WebApiAssemblyFileGenerator)(data));
    }
}


    }
}


        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public class WebApiAssemblyTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
